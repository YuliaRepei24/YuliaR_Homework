//Guess the result
'number' + 3 + 3  // Відповідь: 'number33'
/* В цьому виразі 'number' + 3 + 3, 'number' є строкою(рядком), а наступні значення (3 і 3) 
будуть автоматично перетворені в рядки (строки) для виконання конкатенації
 */
null + 3 // Відповідь: 3
/* Якщо один із операндів оператора + не є числом або рядком, то відбувається їх перетворення в числа. 
Значення null в цьому випадку буде перетворено на число 0. */ 
5 && 'qwerty' // Відповідь: 'qwerty'
/*  Оператор && повертає перший помилковий чи останній операнд, якщо всі операнди істинні.
В нашому вирізі 5 && 'qwerty', два операнди є істинними (не пуустими).Таким чином, оператор &&  поверне останній істинний операнд, 
тобто 'qwerty'.*/
+'40' + +'2' + "hillel" // Відповідь: '42hillel'
/* В цьому виразі +'40' + +'2' + "hillel", '40' і '2' будуть перетворені в числа 40 і 2 відповідно (так як стоїть унарний +). 
Після цього відбувається додавання чисел, что в сумі дасть 42. 
Потім результат 42 конкатенуєть із рядком "hillel" */
'10' - 5 === 6 // Ответ: false
/* Рядок '10' буде автоматично перетворений в чи сло 10, оскільки оператор "-" вимагає числовий операнд.
Таким чином, це буде розраховано як 10 - 5, що дорівнює 5.
Вираз '10' - 5 === 6 поверне false, тому що 5 не дорівнює 6. */
true + false // Відповідь: 1
/* При перетворенні логічних значень в числа true, true перетворюється в 1, а false перетворюється в 0. 
Таким чином, вираз дорівнюватиме 1+0 = 1 */
'4px' - 3 // Відповідь: NaN
/* Оператор віднімання "-" передбачає числовий розрахунок.
В цьому випадку '4px' не може бути перетворене в число, оскільки містить текстові символи. 
У випадку віднімання числа із такого рядка повернеться значення NaN, що значить, що результат операції не є числом.*/
'4' - 3 // Відповідь: 1
/* Рядок '4' може бути перетворенйи число, так як містить лише цифри.
Тому значення виразу дорівнюватиме  4 - 3 = 1. */
'6' - 3 ** 0 // Відповідь: 5
// Оператор (**) використовується для піднесення до степеню. 
// В цьому виразі 3 ** 0 означає 3 в степені 0, что дорівнює 1.
// Так як рядок  '6' може бути перетвореним  в число, вираз '6' - 3 ** 0 буде розраховано так:
// 3 ** 0 дорівнюватиме 1.
//'6' перетворюється в число 6.
// Відбувається віднімання 6 - 1, що дорівнює 5.
12 / '6' // Відповідь: 2
// Якщо один із операндів ділення (/) є рядком, то цей операнд автоматично перетворюється на число. 
// В нашому випадку рядок '6' буде перетворений в число 6, тк як містить лише цифри.
// Результат виразу 12 / '6' буде 2.
'10' + (5 === 6)  // Відповідь: '10false'
// Вираз (5 === 6) поверне логічний вираз false.
// Результат виразу '10' + (5 === 6) буде '10false', де логічне значення false будет перетворено в рядок перед конкатенацією.
null == '' // Відповідь: False
/* Коли null порівнюється з чимось, крім undefined, null перетворюється в 0 (число). 
Пустий рядок '' перетворюється в 0 при нестрогому порівнянні.
Коли порівнюємо null == '', два значення перетворюються в числа і обидва з цих значень дорівнюють 0.
Так як 0 не дорівнює 0 (оскільки null не строго дорівнює пустому рядку), результат порівняння null == '' буде false. */
3 ** (9 / 3)  // Відповідь: 27
/* Вираз  9 / 3 спочатку розраховуємо як 3 (так як цей вираз в дужках, і він в проіритеті), 
а потім 3 ** 3 буде означати піднесееня числа 3 до третього степеню. */
!!'false' == !!'true' // Відповідь: true
/*  Вираз !! false і !! true приведеться до логічного значення, так як подвійне заперечення !! використовується 
для перетворення значення в його булеві відповідники.
Значення 'false' при перетворенні на булеве значення буде true, оскільки будь-який непустий рядок в JavaScript, крім рядка 'false', 
перетворюється на true.
Значення 'true' також перетворюється на true.
Після перетворення обидві частини виразу дорівнюють true, і отже, порівняння true == true поверне true. */
0 || '0' && 1 // Відповідь: 1
/* Оператор && має більший пріоритет, ніж оператор ||
// Вираз '0' && 1 буде обчислено в першу чергу, оскільки оператор && має вищий пріоритет. '0' є істинним значенням, 
так як це непустий рядок, а значить, результат цього виразу буде 1.
//Далі, вираз 0 || 1 буде обчислено. Оператор | поверне перший істинний операнд, якщо він є. В даному випадку, 0 є хибним значенням, 
тому буде повернено значення 1, отримане при попередньому кроці. */
(+null == false) < 1 // Відповідь: false
// Порівняння (+) null == false поверне true, так як оператор (+) перетворює null в 0, і 0 дорівнює false.
// Вираз (+)null == false перетворюється на 0 == false, що буде true.
// Результат порівняння true < 1 буде true, тому що true при перетворенні на число дорівнює 1, і отже, 1 < 1 є хибним виразом.
false && true || true // Відповідь: true
/* Вираз false && true || true буде обчислено зліва направо згідно з пріоритетом операторів.
Спочатку виконаємо операцію false & true. 
Оператор && повертає перший помилковий операнд, якщо такий є, в іншоум випадку - останній операнд.
 В даному випадку перший операнд false, тому результат цієї операції буде false.
Потім здійсниться операція false || true. Оператор | повертає перший істинний операнд, якщо такий є, інакше останній операнд. 
В даному випадку перший операнд false, тому результат цієї операції буде true. */
false && (false || true) // Відповідь: false
/* У виразі false && (false ||true) спочатку буде виконано вираз усередині дужок (false ||true).
Оператор | поверне перший істинний операнд, якщо такий є. 
В даному випадку операнд false помилковий, а true істинний. Тому результатом цієї частини виразу буде true.
Далі оператор && повертає перший помилковий операнд, якщо такий є, в іншому випадку - останній операнд. 
Оскільки перший операнд false, 
то результатом виразу false && (false || true) буде false. */
(+null == false) < 1 ** 5 // Відповідь: false
/* Вираз (+null == false) спочатку перетворює null на число з допомогою унарного плюса, що призведе до значення 0. 
 Потім це значення порівнюється з false. При порівнянні 0 з false, обидва операнда приводяться до числам, 
тому вираз перетворюється на 0 == 0, що поверне true. (Це вираз виконається першим, як у дужках).
Вираз 1 ** 5 обчислює 1 у п'ятому ступені, що дорівнює 1.
 Потім відбувається порівняння true < 1. 
При порівнянні логічного значення true з числом, воно перетворюється на 1. 
Таким чином, вираз перетворюється на 1 < 1, що повертає false */